===================================
How to use ``0-add_integer`` module
===================================

This module defines ``add_integer(a, b=98)``,

Usage
=====

import function from module:
	
	>>> add_integer = __import__('0-add_integer').add_integer

Test one int argument:
	
	>>> add_integer(4)
	102

Test one float:
	
	>>> add_integer(90)
	188

Test one int argument and check default second:
	
	>>> add_integer(0)
	98

Test two integers:

	>>> add_integer(50, 5)
	55

Test one negative float:

	>>> add_integer(-80.5)
	17

Test two big int:

	>>> add_integer(999999998, 999999999)
	1999999997

Test a float and int:

	>>> add_integer(100.875, 8)
	108

Test an int and float:

	>>> add_integer(100, 15.564)
	115

Test two floats:
	
	>>> add_integer(3.569, 0.1)
	0

Test two negative floats:

	>>> add_integer(-4.5, -0.4)
	-4

Test positive and negative ints:

	>>> add_integer(200, -300)
	-100

Non-Numbers
===========

If either of the arguments are neither integer or float a
a TypeError will be raised:

Test a non-integer non-float first arg:
	
	>>> add_integer("foo", 20)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test a non-integer non-float second arg:
	
	>>> add_integer(20, "bar")
	Traceback (most recent call last):
	TypeError: b must be an integer
	
Test an empty first arg:

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test an empty second arg:

	>>> add_integer(6.3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both arguments are neither integers or float, A TypeError msg
is only printed for the first arg.

Test a non-float non-integer first and second arg:

	>>> add_integer("foo", "bar")
	Traceback (most recent call last):
	TypeError: a must be an integer

Test if infinity was provided as first argument:

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test if infinity was provided as second argument:

	>>> add_integer(4, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test for NaN floats or integers as first argument:

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

Test for NaN floats or integers as second argument:

	>>> add_integer(4, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
